#include <stdio.h>
////////////////////////////////////////////////////////////////////////
// ECC related API
////////////////////////////////////////////////////////////////////////
char d[256]={0};
char q_x[256]={0};
char q_y[256]={0};

////////////////////////////////////////////////////////////////////////
// ECC test pattern
////////////////////////////////////////////////////////////////////////
char au8Message[32]=
{
    0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
    0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38
};

////////////////////////////////////////////////////////////////////////
// P256 key 
char au8EccRPrivateKey_P256_D[32]=
{
    0xB3, 0xEA, 0x6A, 0xDD, 0x9F, 0xEE, 0x82, 0x46, 0xEB, 0xE1, 0x52, 0x0E, 0x71, 0xED, 0x38, 0x9E,
    0x44, 0xB6, 0x16, 0x66, 0x95, 0xAF, 0x49, 0x0F, 0x9C, 0x28, 0x80, 0x48, 0xD7, 0x85, 0x3D, 0x6D
};

char au8EccPublicKey_P256_Q_X[32]=
{
    0x2A, 0xEC, 0xB3, 0xEB, 0x5C, 0x72, 0xE9, 0xF1, 0x4E, 0xBF, 0x7C, 0xC7, 0xD0, 0x99, 0x3B, 0xF2,
    0xEC, 0x04, 0x2A, 0xDB, 0xE5, 0x3E, 0x37, 0xCD, 0x74, 0x9C, 0x96, 0x63, 0xE2, 0x08, 0x80, 0x0A
};

char au8EccPublicKey_P256_Q_Y[32]=
{
    0x38, 0x69, 0x76, 0x19, 0x6D, 0x47, 0xAC, 0x22, 0x91, 0x55, 0x54, 0x57, 0xCC, 0xF8, 0xD9, 0x45,
    0x2A, 0x68, 0xAA, 0x1F, 0xFE, 0xBB, 0xB1, 0x0D, 0x01, 0x19, 0x34, 0xC0, 0x9F, 0x2A, 0x83, 0xB4
};

////////////////////////////////////////////////////////////////////////
// P384 key
char au8EccRPrivateKey_P384_D[48]=
{
    0x16, 0x36, 0xCF, 0x60, 0xCE, 0x8F, 0xC7, 0x66, 0x34, 0x25, 0x85, 0x2C, 0xFD, 0x23, 0x80, 0x7D,
    0xB5, 0xA1, 0xDA, 0x2A, 0xE3, 0x15, 0xAA, 0xA7, 0x2D, 0x6B, 0xDA, 0x46, 0xCF, 0x15, 0xF0, 0x38,
    0xFC, 0x0E, 0x62, 0xEF, 0x63, 0xBD, 0x61, 0xD1, 0x1D, 0x62, 0x4A, 0x99, 0x36, 0x8D, 0xDC, 0x6A,
};

char au8EccPublicKey_P384_Q_X[48]=
{
    0x05, 0x42, 0xEB, 0x05, 0x19, 0x50, 0x2A, 0x73, 0x35, 0xDE, 0x0C, 0xDE, 0xBC, 0xD6, 0x40, 0xC7,
    0x2F, 0xA1, 0xC6, 0x50, 0x8D, 0x81, 0x93, 0xB7, 0x99, 0xAA, 0x23, 0x3F, 0xF9, 0x40, 0x32, 0xAD,
    0x6F, 0x72, 0x1F, 0x34, 0x66, 0x72, 0x57, 0x99, 0x85, 0xA1, 0x74, 0x90, 0xA3, 0xE7, 0x54, 0xAF,
};

char au8EccPublicKey_P384_Q_Y[48]=
{
    0x8D, 0x94, 0x05, 0x0D, 0x96, 0xB1, 0x5E, 0xC0, 0xBA, 0xC0, 0x23, 0xC0, 0x20, 0xBA, 0x18, 0x9F,
    0x92, 0x90, 0x4F, 0xA1, 0xE5, 0x1E, 0xD5, 0xAE, 0x7F, 0xE4, 0xF2, 0x44, 0xBC, 0x76, 0xBA, 0x11,
    0x9C, 0xFF, 0x6B, 0x13, 0x5A, 0x18, 0x6C, 0xB6, 0xF4, 0x71, 0xE1, 0xE3, 0xA0, 0x04, 0xD2, 0xE3,
};

////////////////////////////////////////////////////////////////////////
// P521 key
char au8EccRPrivateKey_P521_D[66]=
{
    0x01, 0x56, 0x6D, 0x57, 0x93, 0x94, 0x17, 0xED, 0xDD, 0xF4, 0xDC, 0x30, 0xBD, 0xA7, 0x61, 0x07, 
    0x59, 0x79, 0x5B, 0x21, 0x14, 0x54, 0xE9, 0x92, 0x25, 0x36, 0x92, 0x7D, 0x64, 0xAF, 0x26, 0x8D, 
    0x13, 0xC9, 0x0D, 0x46, 0xC3, 0x7E, 0x41, 0x0B, 0x26, 0xCE, 0x7C, 0x66, 0xA3, 0x09, 0xF0, 0x41, 
    0xC9, 0x28, 0xB5, 0xFD, 0xF6, 0xAC, 0xD8, 0x30, 0x11, 0x0E, 0x0B, 0x11, 0x1F, 0x54, 0xD8, 0x39, 
    0x2A, 0xA8,
};

char au8EccPublicKey_P521_Q_X[66]=
{
    0x01, 0xD3, 0x45, 0xCC, 0x2B, 0x38, 0xB7, 0x13, 0xC7, 0x3B, 0x19, 0xFC, 0x27, 0x9B, 0x76, 0x26, 
    0xE1, 0x2D, 0x5A, 0xA1, 0x0D, 0xCC, 0x4A, 0x97, 0x17, 0x93, 0xCD, 0x6E, 0x39, 0x50, 0x9D, 0x06, 
    0xB2, 0x6F, 0x2D, 0x09, 0x21, 0x9D, 0x08, 0x78, 0x1C, 0x4A, 0xC5, 0x61, 0xD2, 0x2A, 0x85, 0xC3, 
    0x03, 0xDB, 0xAB, 0xE6, 0x7E, 0x5E, 0xE7, 0xB6, 0x13, 0xCB, 0x98, 0x35, 0x5F, 0x88, 0x7F, 0x0B, 
    0xFA, 0x1A,
};

char au8EccPublicKey_P521_Q_Y[66]=
{
    0x01, 0xCB, 0xEB, 0x49, 0x6B, 0xCD, 0x9E, 0x6D, 0xB0, 0x89, 0xCB, 0x9F, 0x57, 0xE3, 0x11, 0x3C, 
    0x84, 0xC7, 0xE2, 0x7C, 0xAF, 0x4F, 0xEF, 0x80, 0xB4, 0xBE, 0xE2, 0xB1, 0x0C, 0x3E, 0x04, 0x8A, 
    0xF8, 0x20, 0xA1, 0x94, 0xAF, 0x3A, 0xCD, 0x3D, 0xF5, 0xA7, 0x99, 0xF2, 0x86, 0xF4, 0xCC, 0x9C, 
    0xDD, 0x73, 0x0A, 0xD2, 0xB6, 0x86, 0x79, 0xC5, 0xDD, 0x74, 0xBA, 0x64, 0xBA, 0x76, 0x70, 0x6A, 
    0xDC, 0x87,
};
////////////////////////////////////////////////////////////////////////
// BP256 key
char au8EccRPrivateKey_BP256_D[32]=
{
	0x0B, 0x62, 0xDB, 0xD5, 0xA3, 0xC7, 0xF3, 0x6C, 0x90, 0xCF, 0x74, 0x5C, 0xD4, 0xB4, 0x82, 0xE2, 
	0x48, 0x46, 0x58, 0x98, 0x62, 0x60, 0x0D, 0x3A, 0xE1, 0x85, 0xFC, 0xEC, 0xF0, 0x0A, 0x76, 0xC2, 
};

char au8EccPublicKey_BP256_Q_X[32]=
{
	0x5C, 0x8E, 0x64, 0xEC, 0x0B, 0x26, 0x58, 0xC0, 0x90, 0x5E, 0x2B, 0x63, 0xE9, 0x9B, 0x51, 0x06, 
	0x13, 0x8C, 0xDD, 0xBC, 0xF5, 0x3A, 0x51, 0x19, 0x6D, 0x9B, 0xA1, 0x62, 0x5F, 0x41, 0x98, 0x63, 
};

char au8EccPublicKey_BP256_Q_Y[32]=
{
	0x0F, 0x93, 0x6C, 0x22, 0xB4, 0x84, 0x07, 0x50, 0x57, 0x44, 0x9A, 0x88, 0x3C, 0xF3, 0x27, 0x9D, 
	0x0F, 0x5D, 0xF5, 0x44, 0xC4, 0x15, 0xA9, 0xAB, 0xE2, 0x08, 0xA2, 0xE2, 0xD2, 0xEA, 0x8E, 0xB9, 
};
////////////////////////////////////////////////////////////////////////
// BP384 key
char au8EccRPrivateKey_BP384_D[48]=
{
	0x04, 0xB9, 0xD1, 0x01, 0x5B, 0xC0, 0x48, 0xC0, 0x41, 0x6B, 0x59, 0x69, 0xEF, 0xC6, 0x9A, 0x9B, 
	0xDB, 0x04, 0xB2, 0xA8, 0xC7, 0xAA, 0x07, 0xBB, 0xED, 0xAE, 0xC4, 0x23, 0x29, 0x5A, 0x96, 0x13, 
	0x4A, 0xC0, 0x36, 0xD9, 0xA9, 0x58, 0xA4, 0x98, 0x8A, 0x7F, 0xCE, 0x4D, 0x8D, 0xAA, 0x90, 0x87, 
};

char au8EccPublicKey_BP384_Q_X[48]=
{
	0x67, 0xA0, 0x9F, 0x3B, 0xFF, 0xD2, 0xE5, 0x81, 0x07, 0x9D, 0xA8, 0xBD, 0x35, 0x7A, 0xDA, 0x7A, 
	0x23, 0xE4, 0x4D, 0xC7, 0xED, 0x2C, 0x4C, 0xA7, 0x1B, 0xFF, 0x94, 0x9B, 0xD1, 0xCB, 0x82, 0x78, 
	0xE9, 0xDF, 0xBD, 0xA5, 0xFF, 0x04, 0xFA, 0xC5, 0xA6, 0xC3, 0x23, 0x2B, 0x9F, 0x22, 0x55, 0xF5, 
};

char au8EccPublicKey_BP384_Q_Y[48]=
{
	0x49, 0xA7, 0x59, 0x75, 0xD4, 0xE1, 0xF6, 0x6E, 0x16, 0x70, 0x1E, 0x06, 0x78, 0x92, 0x41, 0xEE, 
	0xDB, 0x17, 0x25, 0xDA, 0x1E, 0x71, 0x2E, 0x2E, 0xBE, 0x48, 0x10, 0xBD, 0xF9, 0x0C, 0x91, 0x7F, 
	0xD6, 0x71, 0xA9, 0xE0, 0xE3, 0x30, 0x4A, 0x86, 0x14, 0x32, 0xA8, 0x11, 0x86, 0x8C, 0x0E, 0xE8, 
};

////////////////////////////////////////////////////////////////////////
// BP384 key
char au8EccRPrivateKey_BP512_D[64]=
{
	0x97, 0xC1, 0x3E, 0x34, 0xAB, 0x3F, 0xAE, 0x31, 0xA7, 0x40, 0xC0, 0x6E, 0xE0, 0x29, 0xA6, 0xD8,
	0xD3, 0x94, 0x4E, 0xCC, 0xC1, 0xAF, 0xAF, 0x62, 0x9F, 0x68, 0x69, 0x33, 0x49, 0xE9, 0x62, 0x3E,
	0xCC, 0x59, 0x90, 0xC6, 0x62, 0x85, 0x5A, 0x71, 0x8B, 0x0F, 0x6F, 0xDF, 0x89, 0x27, 0x58, 0xB2,
	0x21, 0x38, 0xD4, 0xEA, 0xE0, 0x8F, 0xED, 0x7C, 0x6C, 0xA4, 0xF7, 0xF2, 0xCF, 0x26, 0xBB, 0x00,
};

char au8EccPublicKey_BP512_Q_X[64]=
{
	0x18, 0x46, 0x14, 0x42, 0xF0, 0x57, 0xC3, 0x23, 0xFD, 0x1A, 0xF7, 0x2F, 0xE5, 0x59, 0x75, 0xB9,
	0x0E, 0xEB, 0x28, 0x5B, 0xF7, 0xB1, 0x77, 0x6B, 0xC2, 0xAA, 0x82, 0xE5, 0x69, 0x3F, 0x4C, 0x5B,
	0x64, 0x52, 0x5D, 0x15, 0xCF, 0x37, 0x65, 0x52, 0xD0, 0x88, 0xF3, 0x23, 0xF0, 0x87, 0x55, 0xEA,
	0xAF, 0x21, 0xA7, 0xF1, 0xDC, 0x6F, 0x1B, 0x3B, 0x27, 0x1D, 0x61, 0xC5, 0x88, 0x6A, 0x1D, 0x7D,
};

char au8EccPublicKey_BP512_Q_Y[64]=
{
	0x93, 0xF5, 0xBF, 0x78, 0x9B, 0x7C, 0x33, 0x76, 0x4D, 0xD1, 0x19, 0xC1, 0x42, 0x0A, 0xAD, 0x14,
	0x9E, 0x83, 0x96, 0x69, 0xBB, 0xE6, 0x42, 0xB1, 0x06, 0x6B, 0xC6, 0xA5, 0x18, 0x7C, 0x07, 0xF4,
	0x75, 0xB5, 0xED, 0xFD, 0xED, 0x02, 0x4C, 0xF5, 0x29, 0xAE, 0x48, 0x91, 0x82, 0x6C, 0x39, 0xCA,
	0x4E, 0x27, 0x51, 0x10, 0x30, 0x45, 0x55, 0x43, 0x8B, 0xDD, 0x67, 0xAC, 0xFF, 0x2C, 0xA0, 0xD6,
};

////////////////////////////////////////////////////////////////////////
// P521 key

static void test_ecdsa_test(void)
{
    _TEST_SUITE_TRACE_IN
    sec_ecdsa_test();
    _TEST_SUITE_TRACE_OUT
}

static void test_ecdh_test(void)
{
    _TEST_SUITE_TRACE_IN
    sec_ecdh_test();
    _TEST_SUITE_TRACE_OUT
}

static void _show_ecc_keypair(int u32KeySize)
{
    printf("\n Private Key:   d\n"); _DUMP(u32KeySize, d);
    printf("\n Public  Key: Q_X\n"); _DUMP(u32KeySize, q_x);
    printf("\n Public  Key: Q_Y\n"); _DUMP(u32KeySize, q_y);
}

static void test_ecc_p256_genkey(void)
{
    _TEST_SUITE_TRACE_IN
    sec_ecc_generate_key(d, q_x, q_y, E_ECC_P256);
    _show_ecc_keypair(32);
    _TEST_SUITE_TRACE_OUT
}
static void test_ecc_p384_genkey(void)
{
    _TEST_SUITE_TRACE_IN
    sec_ecc_generate_key(d, q_x, q_y, E_ECC_P384);
    _show_ecc_keypair(48);
    _TEST_SUITE_TRACE_OUT
}

static void test_ecc_p521_genkey(void)
{
    _TEST_SUITE_TRACE_IN
    sec_ecc_generate_key(d, q_x, q_y, E_ECC_P521);
    _show_ecc_keypair(66); // 521 /8 = 65 ...1
    _TEST_SUITE_TRACE_OUT
}
static void test_ecc_bp256_genkey(void)
{
    _TEST_SUITE_TRACE_IN
    sec_ecc_generate_key(d, q_x, q_y, E_ECC_BRAINPOLLP256R1);
    _show_ecc_keypair(32);
    _TEST_SUITE_TRACE_OUT
}
static void test_ecc_bp384_genkey(void)
{
    _TEST_SUITE_TRACE_IN
    sec_ecc_generate_key(d, q_x, q_y, E_ECC_BRAINPOLLP384R1);
    _show_ecc_keypair(48);
    _TEST_SUITE_TRACE_OUT
}
static void test_ecc_bp512_genkey(void)
{
    _TEST_SUITE_TRACE_IN
    sec_ecc_generate_key(d, q_x, q_y, E_ECC_BRAINPOLLP512R1);
    _show_ecc_keypair(64); // 512/8 =64
    _TEST_SUITE_TRACE_OUT
}

static void test_ecc_genkey(void)
{
    _TEST_SUITE_TRACE_IN
    sec_ecc_generate_key(d, q_x, q_y, E_ECC_P256);

    _TEST_SUITE_TRACE_OUT
}

static void test_ecdsa_sign(void)
{
    _TEST_SUITE_TRACE_IN
    char au8Sig_R[32]={0};
    char au8Sig_S[32]={0};

    int hash_type = 0;
    sec_ecdsa_sign(au8EccRPrivateKey_P256_D,
                   au8EccPublicKey_P256_Q_X,
                   au8EccPublicKey_P256_Q_Y,
                   (char*)au8Message,
                   (int)sizeof(au8Message),
                   (char*)au8Sig_R,
                   (char*)au8Sig_S,
                   (int)hash_type,
                   (int)E_ECC_P256);

    printf("\n R Sig\n");
    _DUMP(32, au8Sig_R);
    printf("\n S Sig\n");
    _DUMP(32, au8Sig_S);
    _TEST_SUITE_TRACE_OUT
}

static void test_ecdsa_p256_sign(void)
{
    _TEST_SUITE_TRACE_IN
    char au8Sig_R[32]={0};
    char au8Sig_S[32]={0};

    int hash_type = 0;
    sec_ecdsa_sign(au8EccRPrivateKey_P256_D,
                   au8EccPublicKey_P256_Q_X,
                   au8EccPublicKey_P256_Q_Y,
                   (char*)au8Message,
                   (int)sizeof(au8Message),
                   (char*)au8Sig_R,
                   (char*)au8Sig_S,
                   (int)hash_type,
                   (int)E_ECC_P256);

    printf("\n R Sig\n");
    _DUMP(32, au8Sig_R);
    printf("\n S Sig\n");
    _DUMP(32, au8Sig_S);
    _TEST_SUITE_TRACE_OUT
}


static void test_ecdsa_p384_sign(void)
{
    _TEST_SUITE_TRACE_IN
    char au8Sig_R[48]={0};
    char au8Sig_S[48]={0};
    int hash_type = 0;
    sec_ecdsa_sign(au8EccRPrivateKey_P384_D,
                   au8EccPublicKey_P384_Q_X,
                   au8EccPublicKey_P384_Q_Y,
                   (char*)au8Message,
                   (int)sizeof(au8Message),
                   (char*)au8Sig_R,
                   (char*)au8Sig_S,
                   (int)hash_type,
                   (int)E_ECC_P384);

    printf("\n R Sig\n");
    _DUMP(48, au8Sig_R);
    printf("\n S Sig\n");
    _DUMP(48, au8Sig_S);
    _TEST_SUITE_TRACE_OUT
}


static void test_ecdsa_p521_sign(void)
{
    _TEST_SUITE_TRACE_IN
    char au8Sig_R[66]={0};
    char au8Sig_S[66]={0};
    int hash_type = 0;
    sec_ecdsa_sign(au8EccRPrivateKey_P521_D,
                   au8EccPublicKey_P521_Q_X,
                   au8EccPublicKey_P521_Q_Y,
                   (char*)au8Message,
                   (int)sizeof(au8Message),
                   (char*)au8Sig_R,
                   (char*)au8Sig_S,
                   (int)hash_type,
                   (int)E_ECC_P521);

    printf("\n R Sig\n");
    _DUMP(66, au8Sig_R);
    printf("\n S Sig\n");
    _DUMP(66, au8Sig_S);
    _TEST_SUITE_TRACE_OUT
}

static void test_ecdsa_bp256_sign(void)
{
    _TEST_SUITE_TRACE_IN
    char au8Sig_R[32]={0};
    char au8Sig_S[32]={0};
    int hash_type = 0;
    sec_ecdsa_sign(au8EccRPrivateKey_BP256_D,
                   au8EccPublicKey_BP256_Q_X,
                   au8EccPublicKey_BP256_Q_Y,
                   (char*)au8Message,
                   (int)sizeof(au8Message),
                   (char*)au8Sig_R,
                   (char*)au8Sig_S,
                   (int)hash_type,
                   (int)E_ECC_BRAINPOLLP256R1);

    printf("\n R Sig\n");
    _DUMP(32, au8Sig_R);
    printf("\n S Sig\n");
    _DUMP(32, au8Sig_S);
    _TEST_SUITE_TRACE_OUT
}

static void test_ecdsa_bp384_sign(void)
{
    _TEST_SUITE_TRACE_IN
    char au8Sig_R[48]={0};
    char au8Sig_S[48]={0};
    int hash_type = 0;
    sec_ecdsa_sign(au8EccRPrivateKey_BP384_D,
                   au8EccPublicKey_BP384_Q_X,
                   au8EccPublicKey_BP384_Q_Y,
                   (char*)au8Message,
                   (int)sizeof(au8Message),
                   (char*)au8Sig_R,
                   (char*)au8Sig_S,
                   (int)hash_type,
                   (int)E_ECC_BRAINPOLLP384R1);

    printf("\n R Sig\n");
    _DUMP(48, au8Sig_R);
    printf("\n S Sig\n");
    _DUMP(48, au8Sig_S);
    _TEST_SUITE_TRACE_OUT
}

static void test_ecdsa_bp512_sign(void)
{
    _TEST_SUITE_TRACE_IN
    char au8Sig_R[64]={0};
    char au8Sig_S[64]={0};
    int hash_type = 0;
    sec_ecdsa_sign(au8EccRPrivateKey_P521_D,
                   au8EccPublicKey_P521_Q_X,
                   au8EccPublicKey_P521_Q_Y,
                   (char*)au8Message,
                   (int)sizeof(au8Message),
                   (char*)au8Sig_R,
                   (char*)au8Sig_S,
                   (int)hash_type,
                   (int)E_ECC_BRAINPOLLP512R1);

    printf("\n R Sig\n");
    _DUMP(64, au8Sig_R);
    printf("\n S Sig\n");
    _DUMP(64, au8Sig_S);
    _TEST_SUITE_TRACE_OUT
}
static void test_ecdsa_verify(void)
{
    _TEST_SUITE_TRACE_IN

    char au8Sig_R[32]={
        0x92, 0x16, 0x30, 0xD6, 0x4A, 0xA3, 0x97, 0x83, 0x85, 0x1D, 0x54, 0x5A, 0x63, 0xD0, 0x81, 0x3E,
        0xAE, 0x04, 0x3C, 0x7D, 0x0B, 0x01, 0xD7, 0x56, 0xDA, 0x40, 0x07, 0x70, 0x3D, 0x09, 0xCC, 0x69
    };

    char au8Sig_S[32]={
        0x5F, 0xD9, 0x92, 0x5D, 0x7D, 0x9E, 0x5D, 0x1A, 0x66, 0x06, 0x3E, 0x8E, 0x60, 0x1B, 0x07, 0xAE,
        0x0D, 0xEC, 0xC3, 0x64, 0xAC, 0xAA, 0xA5, 0x46, 0x7E, 0x2D, 0x69, 0xDB, 0xD5, 0x9A, 0x14, 0x8D
    };

    int hash_type = 0;
    sec_ecdsa_verify(au8EccPublicKey_P256_Q_X,
                     au8EccPublicKey_P256_Q_Y,
                     (char*)au8Message,
                     (int)sizeof(au8Message),
                     (char*)au8Sig_R,
                     (char*)au8Sig_S,
                     (int)hash_type,
                     (int)E_ECC_P256);
    _TEST_SUITE_TRACE_OUT
}


static void test_ecdsa_p256_verify(void)
{
    _TEST_SUITE_TRACE_IN

    char au8Sig_R[32]={
        0x92, 0x16, 0x30, 0xD6, 0x4A, 0xA3, 0x97, 0x83, 0x85, 0x1D, 0x54, 0x5A, 0x63, 0xD0, 0x81, 0x3E,
        0xAE, 0x04, 0x3C, 0x7D, 0x0B, 0x01, 0xD7, 0x56, 0xDA, 0x40, 0x07, 0x70, 0x3D, 0x09, 0xCC, 0x69
    };

    char au8Sig_S[32]={
        0x5F, 0xD9, 0x92, 0x5D, 0x7D, 0x9E, 0x5D, 0x1A, 0x66, 0x06, 0x3E, 0x8E, 0x60, 0x1B, 0x07, 0xAE,
        0x0D, 0xEC, 0xC3, 0x64, 0xAC, 0xAA, 0xA5, 0x46, 0x7E, 0x2D, 0x69, 0xDB, 0xD5, 0x9A, 0x14, 0x8D
    };

    int hash_type = 0;
    sec_ecdsa_verify(au8EccPublicKey_P256_Q_X,
                     au8EccPublicKey_P256_Q_Y,
                     (char*)au8Message,
                     (int)sizeof(au8Message),
                     (char*)au8Sig_R,
                     (char*)au8Sig_S,
                     (int)hash_type,
                     (int)E_ECC_P256);
    _TEST_SUITE_TRACE_OUT
}

static void test_ecdsa_p384_verify(void)
{
    _TEST_SUITE_TRACE_IN

    char au8Sig_R[48]={
        0x21, 0xF7, 0x85, 0x9D, 0xDA, 0x34, 0xD4, 0xE3, 0x47, 0x5C, 0x3A, 0x74, 0xF9, 0x4E, 0x5E, 0x3A, 
        0x22, 0xCC, 0xF6, 0xA1, 0x8E, 0xB6, 0x71, 0x4B, 0xE4, 0xBB, 0x32, 0x89, 0x8E, 0x5E, 0x5F, 0x5E, 
        0x35, 0x49, 0x86, 0x1F, 0x3E, 0x3A, 0x5C, 0x27, 0x0B, 0x27, 0x4B, 0xF0, 0x3F, 0x7A, 0xCF, 0x93, 
    };

    char au8Sig_S[48]={
        0x99, 0x1A, 0x3E, 0xCE, 0xA1, 0xFF, 0xEE, 0x97, 0x5C, 0xED, 0x57, 0x96, 0x78, 0x62, 0xFA, 0x21, 
        0x9E, 0xB0, 0x14, 0xB9, 0x7A, 0xD7, 0xCC, 0x71, 0xDD, 0x5C, 0x6D, 0xFE, 0x18, 0x14, 0xDE, 0x07, 
        0xF3, 0x48, 0x14, 0xA3, 0xC1, 0x43, 0x20, 0xF6, 0x22, 0x01, 0x32, 0x89, 0x3F, 0x35, 0x9B, 0xB5, 
    };
    int hash_type = 0;
    sec_ecdsa_verify(au8EccPublicKey_P384_Q_X,
                     au8EccPublicKey_P384_Q_Y,
                     (char*)au8Message,
                     (int)sizeof(au8Message),
                     (char*)au8Sig_R,
                     (char*)au8Sig_S,
                     (int)hash_type,
                     (int)E_ECC_P384);
    _TEST_SUITE_TRACE_OUT
}

static void test_ecdsa_p521_verify(void)
{
    _TEST_SUITE_TRACE_IN

    char au8Sig_R[66]={
		0xF2, 0x7D, 0x3B, 0x15, 0x63, 0x1D, 0x12, 0xAB, 0x6D, 0x23, 0xF9, 0x33, 0x5A, 0x0B, 0xA4, 0xB5,
		0xE5, 0xAD, 0x0C, 0xD9, 0x79, 0x8A, 0x5E, 0x47, 0x99, 0xC7, 0x32, 0xBE, 0x3C, 0x2B, 0xEA, 0xC2,
		0x83, 0x18, 0x4E, 0x1F, 0x0B, 0x49, 0xA8, 0x3B, 0x93, 0x9D, 0x09, 0xA5, 0xC5, 0x9F, 0xFC, 0x4D,
		0x24, 0xDF, 0x82, 0xEB, 0x32, 0x03, 0x62, 0xD2, 0xB5, 0xF0, 0xC5, 0x35, 0xAC, 0xAB, 0xE9, 0xF5,
		0xB7, 0x00, 
    };

    char au8Sig_S[66]={
		0x52, 0x94, 0xB4, 0xBB, 0x3C, 0x4B, 0x81, 0xD9, 0xDA, 0x4D, 0x18, 0xE2, 0x3F, 0x1E, 0x0B, 0xC0,
		0x33, 0x0C, 0x25, 0x0E, 0x67, 0xC4, 0x1A, 0xA1, 0xE5, 0xC8, 0xC7, 0xD2, 0x19, 0x81, 0x5F, 0x80,
		0x22, 0x9B, 0xE4, 0x14, 0xAB, 0xAF, 0x6B, 0x39, 0xC1, 0x5A, 0xE6, 0x24, 0xF9, 0x25, 0x8E, 0xA8,
		0x20, 0x17, 0xBD, 0x86, 0xB1, 0x9E, 0xC3, 0x26, 0xD6, 0xDA, 0xF7, 0x8F, 0xFD, 0xFA, 0xDB, 0x82,
		0xF2, 0x00,
    };
    int hash_type = 0;
    sec_ecdsa_verify(au8EccPublicKey_P521_Q_X,
                     au8EccPublicKey_P521_Q_Y,
                     (char*)au8Message,
                     (int)sizeof(au8Message),
                     (char*)au8Sig_R,
                     (char*)au8Sig_S,
                     (int)hash_type,
                     (int)E_ECC_P521);
    _TEST_SUITE_TRACE_OUT
}


static void test_ecdsa_bp256_verify(void)
{
    _TEST_SUITE_TRACE_IN

    char au8Sig_R[32]={
		0x27, 0x9A, 0xEE, 0xD5, 0xF8, 0x93, 0x4D, 0xCA, 0x5F, 0xBB, 0xA9, 0xB8, 0x42, 0x07, 0x1F, 0x66, 
		0xF8, 0x1D, 0x18, 0xB0, 0xAB, 0x57, 0xC7, 0xB2, 0x50, 0x00, 0xB4, 0x36, 0x76, 0x50, 0x69, 0xD3, 
    };

    char au8Sig_S[32]={
		0x50, 0xEB, 0x2B, 0xD6, 0x11, 0x63, 0x36, 0x0B, 0x47, 0x32, 0x6B, 0x6B, 0x23, 0x4B, 0x2C, 0x6E, 
		0x32, 0xFC, 0x7B, 0xD6, 0x0B, 0xF7, 0x69, 0x19, 0x4E, 0x08, 0x4B, 0xA3, 0xAE, 0x97, 0x87, 0xD0, 
    };

    int hash_type = 0;
    sec_ecdsa_verify(au8EccPublicKey_BP256_Q_X,
                     au8EccPublicKey_BP256_Q_Y,
                     (char*)au8Message,
                     (int)sizeof(au8Message),
                     (char*)au8Sig_R,
                     (char*)au8Sig_S,
                     (int)hash_type,
                     (int)E_ECC_BRAINPOLLP256R1);
    _TEST_SUITE_TRACE_OUT
}


static void test_ecdsa_bp384_verify(void)
{
    _TEST_SUITE_TRACE_IN

    char au8Sig_R[48]={
		0x4C, 0x7F, 0xE1, 0xB7, 0x65, 0xCA, 0x1A, 0x1B, 0xFE, 0x6D, 0xFC, 0x90, 0x2E, 0xAB, 0x3B, 0x6B, 
		0x99, 0x69, 0x29, 0xB6, 0xB0, 0x56, 0xE8, 0xEE, 0x7A, 0x38, 0xE8, 0x3A, 0x39, 0xAA, 0xFA, 0xBB, 
		0x00, 0x7E, 0xAE, 0x39, 0xD4, 0x66, 0xC8, 0x72, 0x86, 0xD6, 0xEB, 0x38, 0x37, 0x5E, 0x3A, 0xF5, 
    };

    char au8Sig_S[48]={
		0x41, 0xFA, 0xE2, 0x65, 0x7A, 0xFE, 0xD3, 0x49, 0x5A, 0x11, 0xBF, 0x19, 0x30, 0x34, 0xAD, 0xE1, 
		0x14, 0xD4, 0x4D, 0x41, 0xA6, 0x98, 0x73, 0x0C, 0xB9, 0x5D, 0x5A, 0x2D, 0xFD, 0x24, 0xF2, 0x51, 
		0x6F, 0x71, 0xEA, 0x39, 0x1C, 0xDE, 0x82, 0x1C, 0x61, 0x23, 0x1B, 0x33, 0xA3, 0xC2, 0x62, 0xD1, 
    };

    int hash_type = 0;
    sec_ecdsa_verify(au8EccPublicKey_BP384_Q_X,
                     au8EccPublicKey_BP384_Q_Y,
                     (char*)au8Message,
                     (int)sizeof(au8Message),
                     (char*)au8Sig_R,
                     (char*)au8Sig_S,
                     (int)hash_type,
                     (int)E_ECC_BRAINPOLLP384R1);
    _TEST_SUITE_TRACE_OUT
}


static void test_ecdsa_bp512_verify(void)
{
    _TEST_SUITE_TRACE_IN

    char au8Sig_R[64]={
		0x26, 0xD4, 0xBD, 0x89, 0x47, 0x73, 0xAF, 0xB7, 0xF9, 0x05, 0xFA, 0xD1, 0xFA, 0x87, 0xC8, 0xC8, 
		0x5D, 0x30, 0x87, 0xEB, 0xDF, 0x35, 0xD6, 0xFA, 0xC3, 0x1F, 0x46, 0xB3, 0x6C, 0x31, 0x38, 0x0D, 
		0x5D, 0x96, 0xDC, 0x5C, 0x0B, 0x9C, 0x73, 0x4A, 0x6B, 0x90, 0x1F, 0x71, 0x8E, 0x3A, 0x8A, 0xC4, 
		0xAA, 0x61, 0x78, 0xD3, 0x4C, 0xFE, 0xD8, 0xC5, 0x92, 0x8F, 0xC9, 0xE6, 0xCE, 0xBA, 0xB8, 0x6F, 
    };

    char au8Sig_S[64]={
		0x64, 0x65, 0x49, 0x35, 0x7B, 0x63, 0xCD, 0xAC, 0x35, 0x1B, 0x99, 0x24, 0xB2, 0xE1, 0x2B, 0xFD, 
		0x3C, 0xF7, 0x42, 0x45, 0x70, 0x0F, 0xBE, 0x47, 0x44, 0x43, 0xA4, 0x93, 0xAC, 0x5E, 0x66, 0x7E, 
		0xD9, 0x39, 0x37, 0x29, 0x0A, 0xC1, 0x93, 0x45, 0xD5, 0x1A, 0x2A, 0xD4, 0x1D, 0x12, 0x84, 0xFE, 
		0xD3, 0x76, 0x6F, 0x71, 0xF1, 0x36, 0xAA, 0xAD, 0x95, 0x40, 0xEF, 0x57, 0xBC, 0x63, 0xE0, 0x75, 
    };

    int hash_type = 0;
    sec_ecdsa_verify(au8EccPublicKey_BP512_Q_X,
                     au8EccPublicKey_BP512_Q_Y,
                     (char*)au8Message,
                     (int)sizeof(au8Message),
                     (char*)au8Sig_R,
                     (char*)au8Sig_S,
                     (int)hash_type,
                     (int)E_ECC_BRAINPOLLP512R1);
    _TEST_SUITE_TRACE_OUT
}